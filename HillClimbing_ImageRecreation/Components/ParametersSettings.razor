@using System.Drawing

<div>
    <Title>Algorithm parameters</Title>
    <Form Model="@_parametersModel" OnFinish="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <GridRow>
            <GridCol Span="6">
                <label class="form-label">Used shapes:</label>
                <EnumCheckBoxGroup TEnum="Shape" AllInitiallySelected="true" OnChangeCallback="@((x) => _parametersModel.Shapes = x)"></EnumCheckBoxGroup>
            </GridCol>
            <GridCol Span="18">
                <label class="form-label">Shape size limits[px]: [@_parametersModel.MinShapeSize, @_parametersModel.MaxShapeSize]</label>
                <Slider @bind-Value="_parametersModel.ShapeSizeLimits"
                        TValue="(double, double)"
                        Min="1"
                        Max="GetMaxShapeLimit()">
                </Slider>
            </GridCol>
        </GridRow>
        <GridRow>
            <GridCol Span="12">
                <label class="form-label">Starting Background Color:</label>
                <ColorPicker InitialBackgroundAlpha="50" InitialBackgroundColor="#00ff00" OnChangeCallback=@((newColor) => {_parametersModel.BackgroundBaseColorString = newColor;})></ColorPicker>
            </GridCol>
            <GridCol Span="8">
                <label class="form-label">Max iterations:</label>
                <AntDesign.InputNumber TValue="int" Min="100" Max="20000" Step="100" Format="#####" @bind-Value=@_parametersModel.MaxIterations></AntDesign.InputNumber>
            </GridCol>
        </GridRow>
        <Row>
            <label class="form-label">Other settings:</label>
            <GridCol Span="8">
                <Checkbox @bind-Checked="@_parametersModel.AllowRotation" Disabled>Allow rotation (WIP)</Checkbox>
            </GridCol>
            <GridCol Span="8">
                <Checkbox @bind-Checked="@_parametersModel.AllowAlpha">Allow Alpha</Checkbox>
            </GridCol>
            <GridCol Span="8">
                <Checkbox Disabled>Use Color Dictionary (WIP)</Checkbox>
            </GridCol>
        </Row>
        <Button HtmlType="submit" @onclick=@(() => System.Console.WriteLine(_parametersModel.PropertiesToString()))>Start!</Button>
    </Form>
</div>
@code {
    private AlgorithmParameters _parametersModel = new();
    private string? _previousBackgroundColorString;

    [Parameter]
    public EventCallback<AlgorithmParameters> OnAlgorithmParametersSet { get; set; }

    [Parameter]
    public AnalysisResult? Analysis { get; set; }

    protected override void OnParametersSet()
    {
        _parametersModel.ShapeSizeLimits = (1, GetMaxShapeLimit() / 2);
        _parametersModel.BackgroundBaseColorString = "#e1d9d9ff";
        _parametersModel.MaxIterations = 1000;
        _parametersModel.Shapes = new List<Shape>() { Shape.Ellipse, Shape.Rectangle, Shape.Triangle };
        _parametersModel.ImagePresentationInterval = 10;
        _parametersModel.UseBackgroundColorChance = 0.025;
    }

    private int GetMaxShapeLimit()
    {
        return Math.Max(Analysis?.Width ?? 1, Analysis?.Height ?? 1);
    }

    private async void HandleValidSubmit()
    {
        System.Console.WriteLine(_parametersModel.PropertiesToString());
        await OnAlgorithmParametersSet.InvokeAsync(_parametersModel);
    }

    public void OnColorChanged(ChangeEventArgs e)
    {
        System.Console.WriteLine(e.Value?.ToString());
        _parametersModel.BackgroundBaseColorString = e.Value?.ToString() + "ff";
    }

    private void onUseTransparentColorChange(ChangeEventArgs args)
    {
        if ((bool)(args.Value ?? false))
        {
            _previousBackgroundColorString = _parametersModel.BackgroundBaseColorString;
            _parametersModel.BackgroundBaseColorString = "#00000000";
        }
        else
        {
            _parametersModel.BackgroundBaseColorString = _previousBackgroundColorString ?? string.Empty;
            _previousBackgroundColorString = null;
        }
    }
}
