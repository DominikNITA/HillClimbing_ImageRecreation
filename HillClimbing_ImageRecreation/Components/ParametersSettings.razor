@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using System.Drawing

<h3>Parameter Settings</h3>

<EditForm Model="@parametersModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <Row>
        <Column Size="3">
            <label class="form-label">Used shapes:</label>
            <EnumCheckBoxGroup TEnum="Shape" AllInitiallySelected="true" OnChangeCallback="@((x) => parametersModel.Shapes = x)"></EnumCheckBoxGroup>
        </Column>
        <Column Size="9">
            <label class="form-label">Shape size limits[px]: [@parametersModel.MinShapeSize, @parametersModel.MaxShapeSize]</label>
            <SfSlider @bind-Value="parametersModel.ShapeSizeLimits"
                      Type="SliderType.Range"
                      Min="0"
                      Max="GetMaxShapeLimit()">
                <SliderTicks Placement="Placement.After" ShowSmallTicks="true" LargeStep="GetMaxShapeLimit()/10 - GetMaxShapeLimit()%10" SmallStep="1"></SliderTicks>
                <SliderTooltip IsVisible="true" ShowOn="TooltipShowOn.Always" Placement="TooltipPlacement.Before"></SliderTooltip>
                <SliderLimits MinStart="1" Enabled="true"></SliderLimits>
            </SfSlider>
        </Column>
    </Row>
    <Row>
        <Column Size="6">
            <label class="form-label">Starting Background Color:</label>
            <Row>
                <SfColorPicker ModeSwitcher="false"
                               ShowButtons="false"
                               ValueChanged="@OnColorChanged"
                               Value="@parametersModel.BackgroundColorString" />
            </Row>
        </Column>
        <Column Size="4">
            <label class="form-label">Max iterations:</label>
            <SfNumericTextBox TValue="int" Min="100" Max="20000" Step="100" Format="#####" @bind-Value=@parametersModel.MaxIterations></SfNumericTextBox>
        </Column>
    </Row>
    <Row>
        <label class="form-label">Other settings:</label>
        <Column Size="4">
            <SfCheckBox @bind-Checked="@parametersModel.AllowRotation" Disabled>Allow rotation (WIP)</SfCheckBox>
        </Column>
        <Column Size="4">
            <SfCheckBox @bind-Checked="@parametersModel.AllowAlpha">Allow Alpha</SfCheckBox>
        </Column>
        <Column Size="4">
            <SfCheckBox TChecked="bool" Disabled>Use Color Dictionary (WIP)</SfCheckBox>
        </Column>
    </Row>
    <SfButton type="submit">Submit</SfButton>
</EditForm>

@code {
    private AlgorithmParameters parametersModel = new();

    [Parameter]
    public EventCallback<AlgorithmParameters> OnAlgorithmParametersSet { get; set; }

    [Parameter]
    public AnalysisResult? Analysis { get; set; }

    protected override void OnParametersSet()
    {
        parametersModel.ShapeSizeLimits = new int?[] { 1, GetMaxShapeLimit() };
        parametersModel.BackgroundColorString = "#e1d9d9ff";
        parametersModel.MaxIterations = 1000;
        parametersModel.Shapes = new List<Shape>() { Shape.Ellipse, Shape.Rectangle, Shape.Triangle };
        parametersModel.ScoreCalculationInterval = 20;
        parametersModel.ImagePresentationInterval = 10;
        parametersModel.UseBackgroundColorChance = 0.025;
    }

    private int GetMaxShapeLimit()
    {
        return Math.Max(Analysis?.Width ?? 1, Analysis?.Height ?? 1);
    }

    private async void HandleValidSubmit()
    {
        System.Console.WriteLine(parametersModel.PropertiesToString());
        await OnAlgorithmParametersSet.InvokeAsync(parametersModel);
    }

    public void OnColorChanged(string value)
    {
        parametersModel.BackgroundColorString = value;
    }
}
