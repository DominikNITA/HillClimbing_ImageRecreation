@using System.Drawing
@inject ApplicationStateProvider ApplicationStateProvider
<div>
    <Title>Algorithm parameters</Title>
    <EditForm OnValidSubmit="@HandleValidSubmit" Model=@_parametersModel>
        <FluentValidationValidator ValidatorType="typeof(Validators.AlgorithmParametersValidator)" />
        <ValidationSummary />

        <Divider Orientation="left" Style="font-weight:bold">Used shapes</Divider>
        <ShapeCheckBoxGroup AllInitiallySelected="true" OnChangeCallback="@((x) => _parametersModel.Shapes = x)"></ShapeCheckBoxGroup>

        <Divider Orientation="left" Style="font-weight:bold">Shape size limits[px]: [@_parametersModel.MinShapeSize, @_parametersModel.MaxShapeSize]</Divider>
        <Slider @bind-Value="_parametersModel.ShapeSizeLimits"
                TValue="(double, double)"
                Min="1"
                Max="GetMaxShapeLimit()">
        </Slider>

        <Divider Orientation="left" Style="font-weight:bold">Starting Background Color</Divider>
        <ColorPicker InitialBackgroundAlpha="50" InitialBackgroundColor="#00ff00" OnChangeCallback=@((newColor) => {_parametersModel.BackgroundBaseColorString = newColor;})></ColorPicker>

        <Divider Orientation="left" Style="font-weight:bold">Max iterations</Divider>
        <AntDesign.InputNumber TValue="int" Min="100" Max="20000" Step="100" Format="#####" @bind-Value=@_parametersModel.MaxIterations></AntDesign.InputNumber>

        <Divider Orientation="left" Style="font-weight:bold">Other settings</Divider>
        <div>
            <Checkbox @bind-Checked="@_parametersModel.AllowRotation">Allow rotation</Checkbox>
        </div>
        <div>
            <Checkbox @bind-Checked="@_parametersModel.AllowAlpha">Allow Alpha</Checkbox>
        </div>
        <div>
            <Checkbox @bind-Checked="@_parametersModel.ColorDictParameters.Enabled">Use Color Dictionary</Checkbox>
            @if (_parametersModel.ColorDictParameters.Enabled)
            {
                <div>
                    <Text>Resolution</Text>
                    <Slider @bind-Value="_parametersModel.ColorDictParameters.ResolutionDouble"
                            TValue="double"
                            Min="1"
                            Max="128">
                    </Slider>
                    <Text>Start using from iteration</Text>
                    <AntDesign.InputNumber TValue="int"
                                           Min="0"
                                           Max="_parametersModel.MaxIterations"
                    @bind-Value=@_parametersModel.ColorDictParameters.StartUsingFromIteration>
                    </AntDesign.InputNumber>
@*                    <Text>Chance of using color from color dict</Text>
                    <Slider @bind-Value="_parametersModel.ColorDictParameters.UseColorDictChance"
                            TValue="double"
                            Min="0.01"
                            Max="1"
                            Step="0.01">
                    </Slider>*@
                </div>
            }
        </div>

        <Divider></Divider>
        <GridRow Justify="center">
            <GridCol>
                <Button HtmlType="submit" @onclick=@(() => System.Console.WriteLine(_parametersModel.PropertiesToString()))>Start!</Button>
            </GridCol>
        </GridRow>
    </EditForm>
</div>
@code {
    private AlgorithmParameters _parametersModel = new();
    private string? _previousBackgroundColorString;

    protected override void OnParametersSet()
    {
        SetInitialAlgorithmParameters();
    }

    private void SetInitialAlgorithmParameters()
    {
        _parametersModel.ShapeSizeLimits = (1, GetMaxShapeLimit() / 2);
        _parametersModel.BackgroundBaseColorString = "#e1d9d9ff";
        _parametersModel.MaxIterations = 1000;
        _parametersModel.ImagePresentationInterval = 50;
        _parametersModel.UseBackgroundColorChance = 0.025;
        _parametersModel.ColorDictParameters = new()
            {
                Enabled = false,
                ResolutionDouble = 5,
                StartUsingFromIteration = 100,
                UseColorDictChance = 0.8,
            };
    }

    private int GetMaxShapeLimit()
    {
        return Math.Max(ApplicationStateProvider.AnalysisResult?.Width ?? 1, ApplicationStateProvider.AnalysisResult?.Height ?? 1);
    }

    private void HandleValidSubmit()
    {
        System.Console.WriteLine(_parametersModel.PropertiesToString());
        ApplicationStateProvider.Parameters = _parametersModel;
    }

    public void OnColorChanged(ChangeEventArgs e)
    {
        System.Console.WriteLine(e.Value?.ToString());
        _parametersModel.BackgroundBaseColorString = e.Value?.ToString() + "ff";
    }

    private void OnUseTransparentColorChange(ChangeEventArgs args)
    {
        if ((bool)(args.Value ?? false))
        {
            _previousBackgroundColorString = _parametersModel.BackgroundBaseColorString;
            _parametersModel.BackgroundBaseColorString = "#00000000";
        }
        else
        {
            _parametersModel.BackgroundBaseColorString = _previousBackgroundColorString ?? string.Empty;
            _previousBackgroundColorString = null;
        }
    }
}
