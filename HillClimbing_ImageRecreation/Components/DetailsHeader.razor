@inject ApplicationStateProvider ApplicationStateProvider

<PageHeader>
    <PageHeaderTitle>@(((ApplicationState)ApplicationStateProvider.State).GetDescription())</PageHeaderTitle>
    <PageHeaderExtra>
        @if (ApplicationStateProvider.State is ApplicationState.AlgorithmWorking)
        {
            <Button @onclick="@(() => ApplicationStateProvider.State = ApplicationState.AlgorithmStopped)">
                Stop!
            </Button>
        }
        @if (ApplicationStateProvider.State is ApplicationState.AlgorithmStopped)
        {
            <Button @onclick="@(() => ApplicationStateProvider.State = ApplicationState.AlgorithmWorking)">Resume!</Button>
        }
    </PageHeaderExtra>
    <PageHeaderContent>
        @if (ApplicationStateProvider.State is ApplicationState.SelectingImage)
        {
            <div>
                Upload image to start:
                <InputFile OnChange="OnFileUpload" accept=".png,.jpg,.jpeg" />
            </div>
        }
        @if (ApplicationStateProvider.State is ApplicationState.SettingParameters)
        {
            <Descriptions Size="small" Column="3" Title="Image analysis">
                <DescriptionsItem Title="Width" Span="1">@ApplicationStateProvider.AnalysisResult?.Width</DescriptionsItem>
                <DescriptionsItem Title="Pixel Count" Span="1">@ApplicationStateProvider.AnalysisResult?.PixelCount</DescriptionsItem>
                <DescriptionsItem Title="Alpha channel" Span="1">@(ApplicationStateProvider.AnalysisResult?.ContainsAlpha ?? false ? "True" : "False")</DescriptionsItem>
                    <DescriptionsItem Title="Height" Span="1">@ApplicationStateProvider.AnalysisResult?.Height</DescriptionsItem>
                    <DescriptionsItem Title="Distinct colors" Span="1">@ApplicationStateProvider.AnalysisResult?.ColorCount</DescriptionsItem>
            </Descriptions>
        }
        @if (ApplicationStateProvider.State is ApplicationState.AlgorithmWorking or ApplicationState.AlgorithmStopped)
        {
            @if (ApplicationStateProvider.State is ApplicationState.AlgorithmWorking)
            {
                <Button @onclick="@(() => ApplicationStateProvider.State = ApplicationState.AlgorithmStopped)">
                    Stop!
                </Button>
            }
            @if (ApplicationStateProvider.State is ApplicationState.AlgorithmStopped)
            {
                <Button @onclick="@(() => ApplicationStateProvider.State = ApplicationState.AlgorithmWorking)">Resume!</Button>
            }
            <Descriptions Size="small" Column="2">
                <DescriptionsItem Title="Iteration" Span="1">
                    <Progress Percent=@(((double)ApplicationStateProvider.AlgorithmResults!.Last().Iteration/ApplicationStateProvider.Parameters!.MaxIterations)*100)
                          ShowInfo="true"
                              Format=@((d) => $"{ApplicationStateProvider.AlgorithmResults!.Last().Iteration}/{ApplicationStateProvider.Parameters!.MaxIterations}") />
                </DescriptionsItem>
                <DescriptionsItem Title="Score" Span="1">@Algorithm.GetScorePercentage(ApplicationStateProvider.AlgorithmResults?.Last().Score ?? double.MaxValue, ApplicationStateProvider.AnalysisResult?.Width, ApplicationStateProvider.AnalysisResult?.Height)%</DescriptionsItem>
            </Descriptions>
        }

        @if (ApplicationStateProvider.State is ApplicationState.AlgorithmFinished)
        {
            <Button @onclick="@OnGenerateTimelapse">Generate timelapse video!</Button>    
        }

    </PageHeaderContent>
</PageHeader>

@code {
    [Parameter]
    public EventCallback<InputFileChangeEventArgs> OnFileUpload { get; set; }

    [Parameter]
    public Action OnGenerateTimelapse { get; set; }
}
