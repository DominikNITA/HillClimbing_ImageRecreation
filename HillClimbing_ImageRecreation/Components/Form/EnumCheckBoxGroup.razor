@typeparam TEnum

@foreach (var item in CheckableEnums)
{
    <GridRow>
        <Checkbox @bind-Checked="@item.IsSelected" OnChange="OnChange">@item.EnumValue?.ToString()</Checkbox>
    </GridRow>
}

@code {
    [Parameter] 
    public bool AllInitiallySelected { get; set; } = false;

    [Parameter]
    public EventCallback<IEnumerable<TEnum>> OnChangeCallback { get; set; }

    public class CheckableEnum
    {
        public TEnum? EnumValue { get; set; }
        public bool IsSelected { get; set; }
    }

    List<CheckableEnum> CheckableEnums { get; set; } = new List<CheckableEnum>();

    protected override void OnInitialized()
    {
        foreach (var DPvalue in Enum.GetValues(typeof(TEnum)))
        {
            CheckableEnums.Add(new CheckableEnum()
                {
                    EnumValue = (TEnum)DPvalue,
                    IsSelected = AllInitiallySelected
                }
            );
        }
    }

    private async void OnChange(bool b)
    {
        await OnChangeCallback.InvokeAsync(CheckableEnums.Where(x => x.IsSelected).Select(x => x.EnumValue!));
    }
}
