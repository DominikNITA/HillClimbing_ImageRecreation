@page "/main"
@using System.ComponentModel
@implements IDisposable
@inject IWebHostEnvironment Environment
@inject ApplicationStateProvider ApplicationStateProvider

<PageTitle>Hill Climbing Algorithm</PageTitle>

<DetailsHeader OnFileUpload="LoadFiles"
               OnGenerateTimelapse="@(async () => {
                   ApplicationStateProvider.State = ApplicationState.GeneratingTimelapse;
                   _pathToLatestTimeLapse = await (new VideoGenerator().GenerateTimelapseVideo(ApplicationStateProvider.Algorithm?.Id));
                   ApplicationStateProvider.State = ApplicationState.TimelapseGenerated;
               })">
</DetailsHeader>

@if (ApplicationStateProvider.State is ApplicationState.SettingParameters)
{
    <GridRow Justify="space-around">
        <GridCol>
            <div>
                <Title>Uploaded image:</Title>
                <ImageDisplay Path=@_path></ImageDisplay>
            </div>
        </GridCol>
        <GridCol>
            <ParametersSettings></ParametersSettings>
        </GridCol>
    </GridRow>
}

@if (ApplicationStateProvider.State is ApplicationState.AlgorithmWorking or ApplicationState.AlgorithmStopped or ApplicationState.AlgorithmFinished)
{
    <GridRow Justify="center">
        <ImageDisplay Path=@_path></ImageDisplay>
        <ImageDisplay Path=@_pathToLatestImage></ImageDisplay>
    </GridRow>

    if (ApplicationStateProvider.State is ApplicationState.AlgorithmFinished)
    {
        <ScoreChart></ScoreChart>
    }
}

@if (ApplicationStateProvider.State == ApplicationState.GeneratingTimelapse)
{
    <Spin Spinning="true" Tip="Generating Timelapse"></Spin>
    <ScoreChart></ScoreChart>
}

@if (ApplicationStateProvider.State == ApplicationState.TimelapseGenerated)
{
    if (_pathToLatestTimeLapse != null)
    {
        <GridRow Justify="center">
            <ImageDisplay Path=@_path></ImageDisplay>
            <video class="timelapse"
                   width="@ApplicationStateProvider.AnalysisResult?.Width"
                   height="@ApplicationStateProvider.AnalysisResult?.Height"
                   autoplay
                   controls>
                <source src="@StorageHelper.ConvertPathToRelativeToWwwroot(_pathToLatestTimeLapse)" type="video/mp4">
            </video>
        </GridRow>
        <GridRow Justify="center">
            <GridCol Span="12">
                <ScoreChart></ScoreChart>
            </GridCol>
        </GridRow>
    }
}

@code {
    string _path = "";
    string? _pathToLatestImage;
    string? _pathToLatestTimeLapse;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var trustedFileNameForFileStorage = StorageHelper.CreateRandomFileNameWithExtension(e.File.Name);
        _path = StorageHelper.GetPathForFileInUnsafeUploads(trustedFileNameForFileStorage);

        using (FileStream fs = new(_path, FileMode.Create))
        {
            await e.File.OpenReadStream().CopyToAsync(fs);
        }

        ApplicationStateProvider.State = ApplicationState.AnalyzingImage;
        ApplicationStateProvider.AnalysisResult = Analyzer.AnalyzeImage(_path);
        ApplicationStateProvider.State = ApplicationState.SettingParameters;
    }

    void CreateAlgorithm()
    {
        System.Console.WriteLine(_path);
        ApplicationStateProvider.Algorithm = new Algorithm(ApplicationStateProvider.Parameters, _path);
        ApplicationStateProvider.State = ApplicationState.AlgorithmWorking;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false &&
            ApplicationStateProvider.State == ApplicationState.AlgorithmWorking
        )
        {
            if (ApplicationStateProvider.AlgorithmResults?.Count < 1 || ApplicationStateProvider.AlgorithmResults.LastOrDefault()?.Iteration < ApplicationStateProvider.Algorithm?.GetMaxIterations())
            {
                PerformAlgorithmCalculations();
            }
            else
            {
                ApplicationStateProvider.State = ApplicationState.AlgorithmFinished;
            }
        }
        return base.OnAfterRenderAsync(firstRender);

    }

    void PerformAlgorithmCalculations()
    {
        var result = ApplicationStateProvider.Algorithm!.CalculateNextImage();

        if (result.PathToImage != null)
        {
            _pathToLatestImage = result.PathToImage;
        }

        ApplicationStateProvider.AddAlgorithmResult(result);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ApplicationStateProvider.OnStateChange += StateHasChanged;
        ApplicationStateProvider.OnParametersChange += CreateAlgorithm;
    }

    public void Dispose()
    {
        ApplicationStateProvider.OnStateChange -= StateHasChanged;
        ApplicationStateProvider.OnParametersChange -= CreateAlgorithm;
        ApplicationStateProvider.ResetState();
    }
}
