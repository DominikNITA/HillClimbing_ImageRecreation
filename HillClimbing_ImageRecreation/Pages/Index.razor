@page "/"
@using System.ComponentModel
@inject IWebHostEnvironment Environment

<PageTitle>Hill Climbing Algorithm</PageTitle>

<h1>Hill Climbing Algorithm</h1>
<h2>Image Recreation - description lorem ipsum</h2>

<DetailsHeader CurrentState="_currentState"
               OnFileUpload="LoadFiles"
               Analysis="_analysisResult"
               AlgorithmResultList="_algorithmResult"
               OnPause=@(() => {
               _currentState = State.AlgorithmStopped;
               System.Console.WriteLine($"Cancelation requested");})
               OnResume="@PerformAlgorithmCalculations"
               AlgorithmParameters="_algorithmParameters"
               OnGenerateTimelapse="@(async () => {
                   _pathToLatestTimeLapse = await (new VideoGenerator().GenerateTimelapseVideo(_algorithm?.Id));
                   _currentState = State.TimelapseGenerated;
                   StateHasChanged();})">
</DetailsHeader>

@if (_currentState is State.SettingParameters)
{
    <GridRow Justify="space-around">
        <GridCol>
            <div>
                <Title>Uploaded image:</Title>
                <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
            </div>
        </GridCol>
        <GridCol>
            <ParametersSettings Analysis="@_analysisResult" OnAlgorithmParametersSet="@CreateAlgorithm"></ParametersSettings>
        </GridCol>
    </GridRow>
}

@if (_currentState is State.AlgorithmWorking or State.AlgorithmStopped or State.AlgorithmFinished)
{
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_pathToLatestImage ?? ""))">
    @*    <SfChart Title="Score" Width="60%">
        <ChartPrimaryXAxis IntervalType="IntervalType.Auto"
        ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="10"
        Maximum="100"
        Minimum=@(Math.Floor(GetScorePercentage(_algorithmResult.First().Score ?? int.MaxValue)/10)*10)
        RangePadding="ChartRangePadding.Round"
        LabelFormat="{value}%">
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
        <ChartSeries DataSource="@_algorithmResult.Where(r => r.Score != null).Select(r => new ChartData() {
        XValue = r.Iteration,
        YValue = GetScorePercentage(r.Score ?? 1)
        })" XName="XValue" YName="YValue" Type="ChartSeriesType.Line">
        </ChartSeries>
        </ChartSeriesCollection>
        </SfChart>*@

    @if (_currentState == State.TimelapseGenerated)
    {
        if (_pathToLatestTimeLapse != null)
        {
            <video width="@_analysisResult?.Width" height="@_analysisResult?.Height" autoplay controls>
                <source src="@StorageHelper.ConvertPathToRelativeToWwwroot(_pathToLatestTimeLapse)" type="video/mp4">
            </video>
        }
    }
}

@code {
    string _path = "";
    AnalysisResult? _analysisResult;
    AlgorithmParameters? _algorithmParameters;
    List<AlgorithmResult> _algorithmResult = new();
    string? _pathToLatestImage;
    string? _pathToLatestTimeLapse;
    Algorithm? _algorithm;
    State _currentState = State.SelectingImage;
    public class ChartData
    {
        public int XValue { get; set; }
        public double YValue { get; set; }
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _analysisResult = null;
        _algorithmResult = new();

        var trustedFileNameForFileStorage = StorageHelper.CreateRandomFileNameWithExtension(e.File.Name);
        _path = StorageHelper.GetPathForFileInUnsafeUploads(trustedFileNameForFileStorage);

        using (FileStream fs = new(_path, FileMode.Create))
        {
            await e.File.OpenReadStream().CopyToAsync(fs);
        }

        _currentState = State.AnalyzingImage;
        _analysisResult = Analyzer.AnalyzeImage(_path);

        _currentState = State.SettingParameters;
        StateHasChanged();
    }

    void CreateAlgorithm(AlgorithmParameters algorithmParameters)
    {
        _algorithmParameters = algorithmParameters;
        _algorithm = new Algorithm(algorithmParameters, _path, StorageHelper.GlobalFolderPath);
        _currentState = State.AlgorithmWorking;
        PerformAlgorithmCalculations();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false &&
            _currentState == State.AlgorithmWorking
        )
        {
            if (_algorithmResult.LastOrDefault()?.Iteration < _algorithm?.GetMaxIterations())
            {
                PerformAlgorithmCalculations();
            }
            else
            {
                _currentState = State.AlgorithmFinished;
                StateHasChanged();
            }
        }
        return base.OnAfterRenderAsync(firstRender);

    }

    void PerformAlgorithmCalculations()
    {
        _currentState = State.AlgorithmWorking;

        var result = _algorithm!.CalculateNextImage();

        if (result.PathToImage != null)
        {
            _pathToLatestImage = result.PathToImage;
        }

        _algorithmResult.Add(result);

        StateHasChanged();
    }

    public enum State
    {
        [Description("Image selection")]
        SelectingImage,
        [Description("Analyzing image")]
        AnalyzingImage,
        [Description("Select parameters")]
        SettingParameters,
        [Description("Generating image")]
        AlgorithmWorking,
        [Description("Generation stopped")]
        AlgorithmStopped,
        [Description("Generation finished")]
        AlgorithmFinished,
        [Description("Video generated")]
        TimelapseGenerated
    }
}
