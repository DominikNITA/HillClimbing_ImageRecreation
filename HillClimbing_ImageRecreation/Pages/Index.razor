@page "/"
@inject IWebHostEnvironment Environment

<PageTitle>Hill Climbing Algorithm</PageTitle>

<h1>Hill Climbing Algorithm</h1>
<h2>Image Recreation - description lorem ipsum</h2>

<ClearDataButton></ClearDataButton>

@if (_currentState is State.SelectingImage or State.SettingParameters)
{
    <div>
        Upload image to start:
        <InputFile OnChange="@LoadFiles" multiple />
    </div>
}


@if (_currentState is State.SettingParameters)
{
    <Row>
        <Column Size="6">
            <h3>Uploaded image:</h3>
            <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
            <AnalysisResultPreview Analysis="@_analysisResult"></AnalysisResultPreview>
        </Column>
        <Column Size="6">
            <ParametersSettings Analysis="@_analysisResult" OnAlgorithmParametersSet="@CreateAlgorithm"></ParametersSettings>
        </Column>
    </Row>
}

@if (_currentState is State.AlgorithmWorking or State.AlgorithmStopped)
{
    <h3>Result after @_algorithmResult!.Iteration iterations</h3>
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_pathToLatestImage ?? ""))">
    <span>Score: @GetScorePercentage()%</span>

    <SfButton CssClass="e-info" @onclick="@PerformAlgorithmCalculations">MOOOOORE!</SfButton>

    @if (_currentState == State.AlgorithmWorking)
    {
        <SfButton CssClass="e-info" @onclick="@(() => {
            _currentState = State.AlgorithmStopped;
            System.Console.WriteLine($"Cancelation requested");})">Stop!</SfButton>
    }
    @if (_currentState == State.AlgorithmStopped)
    {
        <SfButton CssClass="e-info" @onclick="@PerformAlgorithmCalculations">Resume!</SfButton>
    }
}

@code {
    string _path = "";
    AnalysisResult? _analysisResult;
    AlgorithmResult? _algorithmResult;
    string _pathToLatestImage;
    Algorithm? _algorithm;
    State _currentState = State.SelectingImage;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _analysisResult = null;
        var trustedFileNameForFileStorage = Path.GetRandomFileName();
        trustedFileNameForFileStorage = trustedFileNameForFileStorage.Substring(0, trustedFileNameForFileStorage.LastIndexOf('.')) + e.File.Name.Substring(e.File.Name.LastIndexOf('.'));

        _path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

        using (FileStream fs = new(_path, FileMode.Create))
        {
            await e.File.OpenReadStream().CopyToAsync(fs);
        }

        _currentState = State.AnalyzingImage;
        _analysisResult = Analyzer.AnalyzeImage(_path);

        _currentState = State.SettingParameters;
        StateHasChanged();
    }

    void CreateAlgorithm(AlgorithmParameters algorithmParameters)
    {
        _algorithm = new Algorithm(algorithmParameters, _path,
                Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName));
        _currentState = State.AlgorithmWorking;
        PerformAlgorithmCalculations();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false &&
            _algorithmResult != null &&
            _algorithmResult.Iteration < _algorithm?.GetMaxIterations() &&
            _currentState == State.AlgorithmWorking
        )
        {
            PerformAlgorithmCalculations();
        }
        return base.OnAfterRenderAsync(firstRender);

    }

    void PerformAlgorithmCalculations()
    {
        _currentState = State.AlgorithmWorking;

        _algorithmResult = _algorithm!.CalculateNextImage();

        if (_algorithmResult.PathToImage != null)
        {
            _pathToLatestImage = _algorithmResult.PathToImage;
        }

        StateHasChanged();
    }

    double? GetScorePercentage()
    {
        return (1 - ((double)_algorithmResult!.Score) / (_analysisResult?.Width * _analysisResult?.Height * 4)) * 100;
    }

    enum State
    {
        SelectingImage,
        AnalyzingImage,
        SettingParameters,
        AlgorithmWorking,
        AlgorithmStopped,
        AlgorithmFinished
    }
}
