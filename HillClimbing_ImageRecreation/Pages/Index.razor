@page "/"
@inject IWebHostEnvironment Environment
@using Syncfusion.Blazor.Charts

<PageTitle>Hill Climbing Algorithm</PageTitle>

<h1>Hill Climbing Algorithm</h1>
<h2>Image Recreation - description lorem ipsum</h2>

<ClearDataButton></ClearDataButton>

@if (_currentState is State.SelectingImage or State.SettingParameters)
{
    <SfCard>
        <CardHeader Title="Upload image to start:" />
        <InputFile OnChange="@LoadFiles" />
    </SfCard>
}


@if (_currentState is State.SettingParameters)
{
    <Row>
        <Column Size="6">
            <h3>Uploaded image:</h3>
            <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
        </Column>
        <Column Size="6">
            <AnalysisResultPreview Analysis="@_analysisResult"></AnalysisResultPreview>
            <ParametersSettings Analysis="@_analysisResult" OnAlgorithmParametersSet="@CreateAlgorithm"></ParametersSettings>
        </Column>
    </Row>
}

@if (_currentState is State.AlgorithmWorking or State.AlgorithmStopped or State.AlgorithmFinished)
{
    <h3>Result after @_algorithmResult.LastOrDefault()?.Iteration iterations</h3>
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_pathToLatestImage ?? ""))">
    <div>Score: @GetScorePercentage(_algorithmResult.Where(r => r.Score != null).LastOrDefault()?.Score ?? 1)%</div>

    <SfChart Title="Score" Width="60%">
        <ChartPrimaryXAxis IntervalType="IntervalType.Auto"
                       ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="10"
                       Maximum="100"
                       Minimum=@(Math.Floor(GetScorePercentage(_algorithmResult.First().Score ?? int.MaxValue)/10)*10)
                       RangePadding="ChartRangePadding.Round"
                       LabelFormat="{value}%">
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@_algorithmResult.Where(r => r.Score != null).Select(r => new ChartData() {
XValue = r.Iteration,
YValue = GetScorePercentage(r.Score ?? 1)
})" XName="XValue" YName="YValue" Type="ChartSeriesType.Line">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>

    @if (_currentState == State.AlgorithmWorking)
    {
        <SfButton CssClass="e-info" @onclick="@(() => {
            _currentState = State.AlgorithmStopped;
            System.Console.WriteLine($"Cancelation requested");})">Stop!</SfButton>
    }
    @if (_currentState == State.AlgorithmStopped)
    {
        <SfButton CssClass="e-info" @onclick="@PerformAlgorithmCalculations">Resume!</SfButton>
    }
    @if (_currentState == State.AlgorithmFinished)
    {
        <SfButton CssClass="e-info" @onclick="@(async () => {
           _pathToLatestTimeLapse = await (new VideoGenerator().GenerateTimelapseVideo(_algorithm.Id));
           StateHasChanged();
            })">Render timelapse!</SfButton>

        if (_pathToLatestTimeLapse != null)
        {
            <video width="@_analysisResult.Width" height="@_analysisResult.Height" autoplay loop controls>
                <source src="@_pathToLatestTimeLapse" type="video/mp4">
            </video>
        }
    }
}

@code {
    string _path = "";
    AnalysisResult? _analysisResult;
    List<AlgorithmResult> _algorithmResult = new();
    string? _pathToLatestImage;
    string? _pathToLatestTimeLapse;
    Algorithm? _algorithm;
    State _currentState = State.SelectingImage;

    public class ChartData
    {
        public int XValue { get; set; }
        public double YValue { get; set; }
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _analysisResult = null;
        _algorithmResult = new();

        var trustedFileNameForFileStorage = StorageHelper.CreateRandomFileNameWithExtension(e.File.Name);
        _path = StorageHelper.GetPathForFileInUnsafeUploads(trustedFileNameForFileStorage);

        using (FileStream fs = new(_path, FileMode.Create))
        {
            await e.File.OpenReadStream().CopyToAsync(fs);
        }

        _currentState = State.AnalyzingImage;
        _analysisResult = Analyzer.AnalyzeImage(_path);

        _currentState = State.SettingParameters;
        StateHasChanged();
    }

    void CreateAlgorithm(AlgorithmParameters algorithmParameters)
    {
        _algorithm = new Algorithm(algorithmParameters, _path, StorageHelper.GlobalFolderPath);
        _currentState = State.AlgorithmWorking;
        PerformAlgorithmCalculations();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false &&
            _currentState == State.AlgorithmWorking
        )
        {
            if (_algorithmResult.LastOrDefault()?.Iteration < _algorithm?.GetMaxIterations())
            {
                PerformAlgorithmCalculations();
            }
            else
            {
                _currentState = State.AlgorithmFinished;
                StateHasChanged();
            }
        }
        return base.OnAfterRenderAsync(firstRender);

    }

    void PerformAlgorithmCalculations()
    {
        _currentState = State.AlgorithmWorking;

        var result = _algorithm!.CalculateNextImage();

        if (result.PathToImage != null)
        {
            _pathToLatestImage = result.PathToImage;
        }

        _algorithmResult.Add(result);

        StateHasChanged();
    }

    double GetScorePercentage(double score)
    {
        return (1 - (score) / (_analysisResult!.Width * _analysisResult!.Height * 4)) * 100;
    }

    enum State
    {
        SelectingImage,
        AnalyzingImage,
        SettingParameters,
        AlgorithmWorking,
        AlgorithmStopped,
        AlgorithmFinished,
        TimelapseGenerated
    }
}
