@page "/"
@inject IWebHostEnvironment Environment

<PageTitle>Hill Climbing Algorithm</PageTitle>

<h1>Hill Climbing Algorithm</h1>
<h2>Image Recreation - description lorem ipsum</h2>

<ClearDataButton></ClearDataButton>

<div>
    Upload image to start:
    <InputFile OnChange="@LoadFiles" multiple />
</div>

@if (_analysisResult != null)
{
    <h3>Uploaded image:</h3>
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
    if (_algorithmResult == null)
    {
        <AnalysisResultPreview Analysis="@_analysisResult"></AnalysisResultPreview>
        <ParametersSettings></ParametersSettings>
    }
    <SfButton CssClass="e-info" @onclick="@PerformAlgorithmCalculations">Start!</SfButton>
}

@if (_algorithmResult != null)
{
    <h3>Result after @_algorithmResult.Iteration iterations</h3>
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_algorithmResult.PathToImage))">
    <span>Score: @GetScorePercentage()%</span>
}

@code {
    string _path = "";
    AnalysisResult? _analysisResult;
    AlgorithmResult? _algorithmResult;
    Algorithm? _algorithm;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _analysisResult = null;
        var trustedFileNameForFileStorage = Path.GetRandomFileName();
        trustedFileNameForFileStorage = trustedFileNameForFileStorage.Substring(0, trustedFileNameForFileStorage.LastIndexOf('.')) + e.File.Name.Substring(e.File.Name.LastIndexOf('.'));

        _path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

        using (FileStream fs = new(_path, FileMode.Create))
        {
            await e.File.OpenReadStream().CopyToAsync(fs);
        }

        _analysisResult = Analyzer.AnalyzeImage(_path);

        _algorithm = new(
                new()
                    {
                        BackgroundColor = System.Drawing.Color.Transparent,
                        MaxShapeSize = 80,
                        MinShapeSize = 3,
                        Shapes = new List<Shape>() { Shape.Ellipse, Shape.Rectangle },
                        AllowAlpha = true,
                        AllowRotation = true,
                        MaxIterations = 1000,
                        UseColorDict = true,
                    },
                _path,
                Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName));

        StateHasChanged();
    }

    void PerformAlgorithmCalculations()
    {
        _algorithmResult = _algorithm!.Calculate(250);
    }

    double? GetScorePercentage()
    {
        return (1 - ((double)_algorithmResult!.Score) / (_analysisResult?.Width * _analysisResult?.Height * 4)) * 100;
    }
}
