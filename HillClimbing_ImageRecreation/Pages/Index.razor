@page "/"
@inject IWebHostEnvironment Environment

<PageTitle>Hill Climbing Algorithm</PageTitle>

<h1>Hill Climbing Algorithm</h1>
<h2>Image Recreation</h2>

<ClearDataButton></ClearDataButton>

Upload image to start:
<InputFile OnChange="@LoadFiles" multiple />

@if (_file != null)
{
    <h3>Uploaded image:</h3>
    @*<img src="@path"/>*@
    <img src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(_path))">
    <div>Image name: @_file.Name</div>

}

    <button @onclick="@Analyze">Analyze</button>
    @if (_analysisResult != null)
    {
        <AnalysisResultPreview Analysis="@_analysisResult"></AnalysisResultPreview>
    }

@code {
    IBrowserFile? _file = null;
    string _path = "";
    AnalysisResult? _analysisResult;
    Algorithm? algorithm;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _analysisResult = null;
        var trustedFileNameForFileStorage = Path.GetRandomFileName();
        trustedFileNameForFileStorage = trustedFileNameForFileStorage.Substring(0, trustedFileNameForFileStorage.LastIndexOf('.')) + e.File.Name.Substring(e.File.Name.LastIndexOf('.'));

        _path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

        await using FileStream fs = new(_path, FileMode.Create);
        await e.File.OpenReadStream().CopyToAsync(fs);
        _file = e.File;
        //StateHasChanged();
    }

    void Analyze()
    {
        _analysisResult = Analyzer.AnalyzeImage(_path);
        algorithm = new(
                        new() { 
                            BackgroundColor = System.Drawing.Color.White,
                            MaxShapeSize = 25,
                            MinShapeSize = 2,
                            Shapes = new List<Shape>() {Shape.Ellipse},

                        },
                        _path,
                        Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName));

        algorithm.Calculate(10000);
    }
}
